@page "/cryptoRateData"
@using EstdCoReportApp.Application.Domain;
@using Microsoft.AspNetCore.SignalR.Client;
@inject HttpClient Http

<PageTitle>نرخ لحظه ای رمز ارز</PageTitle>

<div class="alert alert-success" role="alert">
    <h4 class="alert-heading">نرخ لحظه ای رمز ارز!</h4>
    <p>نرخ لحظه ای رمز ارز ها که که هر 60 ثانیه به روز می گردند</p>
    <hr>
    <p class="mb-0">
        داده ها از وب سرویس سایت
        <a href="https://rest.coinapi.io">https://rest.coinapi.io</a>
        دریافت میگردد و به جهت رایگان بودن سرویس، محدودیت روزانه 100 درخواست را دارد.
    </p>
</div>

@if (reports == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div>
        <p>
            <span>بیشترین نوسان: </span>
            @if (mostVolatileCryptoData == null)
            {
            <p><em>در حال بررسی...</em></p>
            }else
            {
                <span>@mostVolatileCryptoData.asset_id_quote</span>
            }
        </p>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Price</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in reports)
            {
                <tr>
                    <td>@forecast.time.ToShortDateString()</td>
                    <td>@forecast.rate</td>
                    <td>@forecast.asset_id_quote</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CryptoRate>? reports;
    private CryptoRate? mostVolatileCryptoData;
    private HubConnection? _reportDataHubConnection;
    private async Task StartHubConnection()
    {
        var apiAddress = "https://localhost:7119";


        var sensorDataUrl = ($"{apiAddress}/cryptoRates");
        _reportDataHubConnection = new HubConnectionBuilder()
                        .WithUrl(sensorDataUrl)
                        .Build();


        await _reportDataHubConnection.StartAsync();
    }
    private void SetRefreshDataListener()
    {
        _reportDataHubConnection.On<List<CryptoRate>>("TransferCryptoRateData", (data) =>
        {
            reports = data;
            StateHasChanged();
        });
        _reportDataHubConnection.On<CryptoRate>("TransferMostVolatileCryptoData", (data) =>
        {
            mostVolatileCryptoData = data;
            StateHasChanged();
        });
    }
    protected override async Task OnInitializedAsync()
    {
        await StartHubConnection();
        SetRefreshDataListener();
    }
}
